<?php

/*
 * This file is part of the Toran package.
 *
 * (c) Nelmio <hello@nelm.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Toran\ProxyBundle\Service;

use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\HttpFoundation\Request;
use Composer\Json\JsonFile;
use Composer\Package\AliasPackage;
use Composer\Package\Dumper\ArrayDumper;
use Composer\Downloader\FileDownloader;
use Composer\Config as ComposerConfig;
use Composer\IO\IOInterface;
use Composer\IO\NullIO;
use Composer\Package\Loader\ArrayLoader;
use Composer\Factory;
use Composer\Util\ComposerMirror;

class RepoSyncer
{
    private $config;
    private $router;
    private $distSyncer;
    private $sourceSyncer;
    private $outputDir;
    private $dumper;

    public function __construct(UrlGeneratorInterface $router, Configuration $config, DistSyncer $distSyncer, SourceSyncer $sourceSyncer, $webDir)
    {
        $this->router = $router;
        $this->config = $config;
        $this->distSyncer = $distSyncer;
        $this->sourceSyncer = $sourceSyncer;
        $this->outputDir = realpath($webDir) . '/repo/private';
        $this->dumper = new ArrayDumper;
    }

    public function sync(IOInterface $io, array $repositories, $fullSync = false)
    {
        unset(ComposerConfig::$defaultRepositories['packagist']);
        $config = Factory::createConfig();
        $config->merge(array('repositories' => array_map(
            function ($r) { return $r->config; },
            $repositories
        )));
        $io->loadConfiguration($config);

        $io->write("<info>Initializing private repositories</info>");

        // TODO LOW skip repos in fullSync mode that have had a hook triggered?
        $repos = Factory::createDefaultRepositories($io, $config);
        $providers = array();

        foreach ($repos as $url => $repo) {
            $io->write(sprintf("<info>Initializing %s</info>", is_numeric($url) ? 'repo #' . $url : $url));
            $packages = $repo->getPackages();

            if ($packages) {
                $providers[$packages[0]->getName()] = array('sha256' => null);

                $io->write(sprintf("<info>Synchronizing dist archives in '%s'</info>", $this->outputDir.'/dists'));
                $this->distSyncer->sync($io, $config, $packages, $this->outputDir.'/dists', $this->config->get('dist_sync_mode'));

                $io->write(sprintf("<info>Synchronizing clone in '%s'</info>", $this->config->get('git_path')));
                $this->sourceSyncer->sync($io, $config, $packages);

                // dump json after syncing dist/source since they can modify the dist url and such
                $this->dumpPackageJson($packages, $this->outputDir.'/p', $io);
            }
        }

        if ($fullSync) {
            $this->dumpJson($providers, $this->outputDir.'/packages.json', $io);
        }
    }

    /**
     * Creates a dist filename for a given package version and
     * preloads the dist from the original URL if it does not exist in
     * the local cache
     */
    public function getDistFilename(Request $req, $name, $version, $ref, $format)
    {
        $file = ComposerMirror::processUrl($this->outputDir.'/dists'.DistSyncer::DIST_FORMAT, $name, $version, $ref, $format);

        if (!file_exists($file)) {
            $json = $this->outputDir.'/p/'.$name.'.json';
            if (file_exists($json)) {
                $packages = json_decode(file_get_contents($json), true);
                if (!empty($packages['packages'][$name])) {
                    foreach ($packages['packages'][$name] as $package) {
                        if ($package['version_normalized'] === $version || md5($package['version_normalized']) === $version) {
                            // clear dist URL if it was generated by toran itself
                            if (isset($package['dist']['url'])
                                && (false !== strpos($package['dist']['url'], $req->getHost()) || false !== strpos($package['dist']['url'], '/repo/private'))
                            ) {
                                unset($package['dist']);
                            }

                            $io = new NullIO;
                            $config = Factory::createConfig();
                            $io->loadConfiguration($config);
                            $loader = new ArrayLoader;
                            $package = $loader->load($package);
                            if ($package instanceof AliasPackage) {
                                $package = $package->getAliasOf();
                            }

                            $this->distSyncer->sync($io, $config, array($package), $this->outputDir.'/dists', 'all');

                            return $file;
                        }
                    }
                }
            }

            return '';
        }

        return $file;
    }

    private function dumpPackageJson(array $packages, $providerDir, IOInterface $io)
    {
        if (!is_dir($providerDir)) {
            mkdir($providerDir, 0777, true);
        }

        $uid = 0;
        $crc = crc32($packages[0]->getName());
        $data = array();
        foreach ($packages as $package) {
            if ($package instanceof AliasPackage) {
                continue;
            }
            $data[$package->getPrettyName()][$package->getPrettyVersion()] = $this->dumper->dump($package);
            $data[$package->getPrettyName()][$package->getPrettyVersion()]['uid'] = $crc.($uid++);
        }

        $io->write('<info>Writing '.$providerDir.'/'.$packages[0]->getName().'.json</info>');
        $json = new JsonFile($providerDir.'/'.$packages[0]->getName().'.json');
        $json->write(array('packages' => $data));
    }

    private function dumpJson(array $providers, $filename, IOInterface $io)
    {
        $repo = array('providers' => $providers);

        $distUrl = Proxy::generateDistUrl($this->router, 'private', '%package%', '%version%', '%reference%', '%type%');
        $mirror = array(
            'dist-url' => $distUrl,
            'preferred' => true,
        );
        if ($this->config->isGitSyncEnabled()) {
            $mirror['git-url'] = $this->config->get('git_prefix') . '%package%/%normalizedUrl%.%type%';
        }
        $repo['mirrors'] = array($mirror);
        $repo['providers-url'] = $this->router->generate('toran_proxy_base', array('repo' => 'private')).'p/%package%.json';

        $io->write('<info>Writing packages.json for the private repository</info>');
        $repoJson = new JsonFile($filename);
        $repoJson->write($repo);
    }
}
